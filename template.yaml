AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Timeout: 10
    MemorySize: 256
    Layers:
      - !Ref CommonLayer

Resources:

  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: [POST]
        AllowHeaders: [Content-Type, Authorization]

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: crm-common-layer
      ContentUri: layer/
      CompatibleRuntimes: [python3.12]
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  # POST /login
  PublicLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers_public
      Handler: login_post.lambda_handler
      Layers:
        - !Ref CommonLayer
      Events:
        HttpApiLogin:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /login
            Method: POST
      Environment:
        Variables:
          MONGODB_URI: "mongodb://host.docker.internal:27017"
          MONGODB_DB_NAME: "db_demo"
          JWT_SECRET: "46ae6e4f0vatkjkj0hfsm15sqt"
          JWT_ALGORITHM: "HS256"

  # POST /forgot-password
  PublicForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers_public
      Handler: forgot_password_post.lambda_handler
      Layers:
        - !Ref CommonLayer
      Events:
        HttpApiForgotPassword:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /forgot-password
            Method: POST
      Environment:
        Variables:
          MONGODB_URI: "mongodb://host.docker.internal:27017"
          MONGODB_DB_NAME: "db_demo"
          JWT_SECRET: "46ae6e4f0vatkjkj0hfsm15sqt"
          JWT_ALGORITHM: "HS256"

  # POST /refresh-token
  PublicRefreshTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers_public
      Handler: refresh_token_post.lambda_handler
      Layers:
        - !Ref CommonLayer
      Events:
        HttpApiRefreshToken:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /refresh-token
            Method: POST
      Environment:
        Variables:
          MONGODB_URI: "mongodb://host.docker.internal:27017"
          MONGODB_DB_NAME: "db_demo"
          JWT_SECRET: "46ae6e4f0vatkjkj0hfsm15sqt"
          JWT_ALGORITHM: "HS256"

  # POST /validate-token
  PublicValidateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers_public
      Handler: validate_token_post.lambda_handler
      Layers:
        - !Ref CommonLayer
      Events:
        HttpApiValidateToken:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /validate-token
            Method: POST
      Environment:
        Variables:
          MONGODB_URI: "mongodb://host.docker.internal:27017"
          MONGODB_DB_NAME: "db_demo"
          JWT_SECRET: "46ae6e4f0vatkjkj0hfsm15sqt"
          JWT_ALGORITHM: "HS256"

Outputs:
  ApiBaseUrl:
    Description: "URL base de la API"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PublicLoginUrl:
    Description: "Endpoint público de login"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login"
  PublicForgotPasswordUrl:
    Description: "Endpoint público de recuperación de contraseña"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/forgot-password"
  PublicRefreshTokenUrl:
    Description: "Endpoint público de refresh token"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/refresh-token"
  PublicValidateTokenUrl:
    Description: "Endpoint público de validación de token"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/validate-token"
